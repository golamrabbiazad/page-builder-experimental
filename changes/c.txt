// category_api

import { apiSlice } from "@/appstore/api-slice";

interface CreateCategoryArgs {
  title: string;
  featuredImage: string;
  content: string;
  status: string;
  searchKeyword: string;
  parentId: number;
  positionOrder: number;
  metaTitle: string;
  metaKeyword: string;
  metaDescription: string;
}

export const categoryApi = apiSlice.injectEndpoints({
  endpoints: (build) => ({
    getAllCategories: build.query({
      query: ({ queryString, isTrash }) =>
        `/categories?status=ACTIVE&status=INACTIVE&isTrash=${isTrash}`,
      providesTags: ["Category"],
    }),
    createCategory: build.mutation<void, CreateCategoryArgs>({
      query: (data) => ({
        url: "/categories",
        method: "POST",
        body: data,
      }),
      invalidatesTags: ["Category"],
    }),
    singleCategory: build.query({
      query: ({ id }) => `/categories/${id}`,
      transformResponse: (response: any) => {
        const metaKeyArray = response?.metaKeyword
          ? response?.metaKeyword.split(",")
          : [];

        const keywordArr = response?.searchKeyword
          ? response?.searchKeyword.split(",")
          : [];

        console.log(response);

        const data = {
          id: response.id,
          title: response.title,
          title_en:
            response.title_en == "null" || null ? "" : response.title_en,
          slug: response.slug,
          searchKeyword: keywordArr,
          metaTitle:
            response.metaTitle == "null" || null ? "" : response.metaTitle,
          metaDescription:
            response.metaDescription == "null" || null
              ? ""
              : response.metaDescription,
          metaKeyword: metaKeyArray,
          status: response.status,
          sub_title:
            response.sub_title == "null" || null ? "" : response.sub_title,
          heading: response.heading == "null" || null ? "" : response.heading,
          content: response.content == "null" || null ? "" : response.content,
          featuredImage: response.feature_img,
          feature_alt:
            response.feature_alt == "null" || null ? "" : response.feature_alt,
        };

        return data;
      },
    }),
    updatecategory: build.mutation({
      query: ({ data, id }) => ({
        url: `/categories/${id}`,
        method: "PATCH",
        body: data,
      }),
      invalidatesTags: ["Category"],
    }),
    deleteCategory: build.mutation({
      query: ({ id, isTrash }) => ({
        url: isTrash ? `/categories/${id}/force` : `/categories/${id}`,
        method: "DELETE",
      }),
      invalidatesTags: ["Category"],
    }),
    restoreCategory: build.mutation({
      query: ({ id }) => {
        return {
          url: `/categories/${id}/restore`,
          method: "PUT",
        };
      },
      invalidatesTags: ["Category"],
    }),
    getCategoryDropdowns: build.query({
      query: () => `/public/categories/dropdown`,

      providesTags: ["Category"],
    }),
    categoryBulkDelete: build.mutation({
      query: ({ ids }) => ({
        url: "/categories/bulk-destroy",
        method: "POST",
        body: { ids: ids },
      }),
      invalidatesTags: ["Category"],
    }),
    moveNews: build.mutation({
      query: (data) => ({
        url: "/news/change-category",
        method: "POST",
        body: data,
      }),
      invalidatesTags: ["Category", "News"],
    }),
  }),

  overrideExisting: true,
});

export const {
  useGetAllCategoriesQuery,
  useCreateCategoryMutation,
  useSingleCategoryQuery,
  useUpdatecategoryMutation,
  useDeleteCategoryMutation,
  useGetCategoryDropdownsQuery,
  useCategoryBulkDeleteMutation,
  useMoveNewsMutation,
  useRestoreCategoryMutation,
} = categoryApi;


// search comp

"use client";

import clsx from "clsx";
import { Input } from "antd";
import { IoSearchOutline } from "react-icons/io5";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import { useState, useTransition, Dispatch, SetStateAction } from "react";

import AvroInput from "@/avro/AvroInput";

type SearchType =
  | "Posts"
  | "Reporters"
  | "Categories"
  | "Topics"
  | "News"
  | "Admins"
  | "Subscribers"
  | "Contributors";

interface PropTypes {
  setKeyword: Dispatch<SetStateAction<string>>;
  className?: string;
  searchType?: SearchType;
  isEnglish?: boolean;
}

const SearchComponent = ({ setKeyword, className, searchType }: PropTypes) => {
  const [searchLanguage, setSearchLanguage] = useState<"english" | "bangla">(
    "english"
  );

  const [isPending, startTransition] = useTransition();
  const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout>();
  const isSearching = timeoutId || isPending;

  return (
    <div className={clsx("relative w-[340px]", className ? className : "")}>
      <span className="absolute cursor-pointer right-[15px] top-[50%] -translate-y-[50%] z-50">
        {!isSearching &&
          (searchLanguage === "english" ? (
            <span onClick={() => setSearchLanguage("bangla")}>English</span>
          ) : (
            <span onClick={() => setSearchLanguage("english")}>বাংলা</span>
          ))}
      </span>

      {searchLanguage !== "english" ? (
        <Input
          size="large"
          type="text"
          id="search"
          placeholder={searchType ? `Search ${searchType}` : "Search"}
          prefix={<IoSearchOutline />}
          onChange={(e) => {
            clearTimeout(timeoutId);

            const id = setTimeout(() => {
              startTransition(() => {
                if (e.target.value) {
                  setKeyword(e.target.value);
                } else {
                  setKeyword("");
                }
                setTimeoutId(undefined);
              });
            }, 500);

            setTimeoutId(id);
          }}
        />
      ) : (
        ""
      )}

      {searchLanguage !== "bangla" ? (
        <AvroInput
          type="text"
          placeholder="খুঁজুন"
          className="w-full border-gray-300 outline-none border-[1px] p-[6px] rounded"
          onChange={(val) => (val ? setKeyword(val) : setKeyword(""))}
        />
      ) : (
        ""
      )}

      {isSearching && (
        <div className="pointer-events-none absolute right-2 bottom-0 top-0 flex items-center z-50">
          <AiOutlineLoading3Quarters className="h-5 w-5 animate-spin text-black" />
        </div>
      )}
    </div>
  );
};

export default SearchComponent;


// categorylist

"use client";
import * as Yup from "yup";
import { generateQueryString } from "@/helpers/utils";
import { Button, Form, Modal, Select, Spin, Table, Tooltip } from "antd";
import { TableProps } from "antd/es/table";
import React, { useState } from "react";
import CategoryAction from "../@components/action_column";
import PageHeader from "@/modules/@common/page_header";
import { useGetAllCategoriesQuery } from "@/appstore/news/category/category_api";
import SearchComponent from "@/modules/@common/search";
import { ErrorMessage, Field, Formik, FormikValues } from "formik";
import clsx from "clsx";

const categorySchema = Yup.object({
  name: Yup.string().required("Required"),
  slug: Yup.string(),
  parentCategory: Yup.number(),
  description: Yup.string(),
});

const initialCategory = {
  name: "",
  slug: "",
  parentCategory: null,
  description: "",
};

interface Category {
  id: number;
  title: string;
  slug: string;
  parentId: number | null;
  featuredImage: string;
  content: string;
  count: number;
  positionOrder: number;
  status: string;
  searchKeyword: string;
  metaTitle: string | null;
  metaKeyword: string;
  metaDescription: string | null;
  createdById: number;
  updatedById: string | null;
  createdAt: string;
  updatedAt: string | null;
  deletedAt: string | null;
  parent: number | null;
}

interface CategoryDashboardListProps {
  data: Category[];
  totalCount: number;
  currentPage: number;
  perPage: number;
}

// response coming from the API
const categoryDashboardList: CategoryDashboardListProps = {
  data: [
    {
      id: 5,
      title: "Test",
      slug: "test",
      parentId: null,
      featuredImage: "",
      content: "football news 2024",
      count: 8,
      positionOrder: 999,
      status: "ACTIVE",
      searchKeyword: "",
      metaTitle: null,
      metaKeyword: "",
      metaDescription: null,
      createdById: 2,
      updatedById: null,
      createdAt: "2024-02-06T18:56:31.051Z",
      updatedAt: "2024-02-06T18:56:31.051Z",
      deletedAt: null,
      parent: null,
    },
  ],
  totalCount: 1,
  currentPage: 1,
  perPage: 1,
};

const CategoriesList = () => {
  const [keyword, setKeyword] = useState("");
  const [page, setPage] = useState(1);
  const [limit, setLimit] = useState(10);
  const [ids, setIds] = useState([]);
  const [moreKeyword, setmoreKeyword] = useState<string[]>();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isTrash, setIsTrash] = useState<any>(false);

  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);

  const handleCategoryModal = () => {
    setIsCategoryModalOpen(!isCategoryModalOpen);
  };

  const queryParams = {
    page,
    limit,
    keyword,
    status: "ACTIVE",
    isTrash,
  };
  const queryString = generateQueryString(queryParams);
  const { data, isFetching } = useGetAllCategoriesQuery({
    queryString,
    isTrash,
  });
  console.log(data);

  const showModal = () => {
    setIsModalOpen(true);
  };

  const handleCancel = () => {
    setIsModalOpen(false);
  };

  //  Pagination
  const paginationOptions = {
    showSizeChanger: true,
    showQuickJumper: true,
    defaultPageSize: limit,
    current: page,
    onChange: (page: any) => {
      setPage(page);
    },
    onShowSizeChange: (_: any, showItem: any) => {
      setLimit(showItem);
    },
    pageSizeOptions: [10, 20, 30, 50],
    total: data?.meta?.total,
    showTotal: (total: number, range: any) =>
      `${range[0]} to ${range[1]} of ${total}`,
  };

  const columns: TableProps<CategoryDashboardListProps["data"][0]>["columns"] =
    [
      {
        title: "Name",
        dataIndex: "category-name",
        key: "category-name",
        width: "20%",
        render: (_, record) => {
          return (
            <div className="flex flex-wrap">
              <p className="text-[14px] mb-0">{record.title}</p>
            </div>
          );
        },
      },
      {
        title: "Description",
        dataIndex: "category-description",
        key: "category-description",
        width: "40%",
        render: (_, record) => {
          return (
            <div className="flex flex-wrap">
              <p className="text-[14px] mb-0">{record.content}</p>
            </div>
          );
        },
      },
      {
        title: "Slug",
        dataIndex: "category-slug",
        key: "category-slug",
        width: "20%",
        render: (_, record) => {
          return (
            <div className="inline-flex items-center gap-8 cursor-pointer">
              {record?.slug}
            </div>
          );
        },
      },
      {
        title: "News Count",
        dataIndex: "news-count",
        key: "news-count",
        width: "10%",
        render: (_, record) => {
          return (
            <div className="flex flex-wrap">
              {/* count isn't available in the API */}
              <p className="text-[14px] mb-0">0</p>
            </div>
          );
        },
      },
      {
        title: "Actions",
        dataIndex: "actions",
        key: "actions",
        align: "right",
        width: "10%",
        render: (_, record) => (
          <CategoryAction
            handleModal={handleCategoryModal}
            isTrash={isTrash}
            record={record}
          />
        ),
      },
    ];
  const rowSelection = {
    onChange: (selectedRowKeys: React.Key[], selectedRows: Category[]) => {
      const getId: any = selectedRows?.map((item) => item.id);
      setIds(getId);
    },
  };

  const createHandler = async (values: FormikValues) => {
    const data = {
      name: values?.name,
      slug: values?.slug,
      parentCategory: values?.parentCategory,
      description: values?.description,
    };

    console.log(data);
  };

  const singleLoading = false;

  const singleCategory = {
    name: "sports",
    slug: "sports",
    parentId: 3,
    description: "Best sports news you'll find here.",
  };

  return (
    <div className="">
      <PageHeader
        breadcrumbsData={[
          { title: "Admin", link: "/user/admin" },
          { title: "Categories" },
        ]}
        title="Categories"
        btnTitle="Add Category"
        btnLink={"/user/admin/categories/add"}
        setKeyword={setKeyword}
      />

      <div className="flex justify-between items-center my-4 gap-[10px]">
        <div className="flex gap-3">
          <button
            onClick={() => {
              setIsTrash(false);
              setIds([]);
              setPage(1);
            }}
            type="button"
            // className={`btn ${!isTrash ? "btn-grey" : "btn-white-outline"}`}
            className="btn-grey rounded-md"
          >
            All
          </button>
          <button
            onClick={() => {
              setIsTrash(true);
              setIds([]);
              setPage(1);
            }}
            type="button"
            className={clsx(
              "btn rounded-md",
              isTrash ? "btn-secondary" : "btn-white-outline"
            )}
          >
            Trash
          </button>
        </div>

        <div className="flex items-center gap-3">
          <SearchComponent setKeyword={setKeyword} searchType="Category" />
        </div>
      </div>

      <div>
        <Table
          rowKey="id"
          columns={columns}
          dataSource={data?.data}
          pagination={paginationOptions}
          loading={isFetching}
        />
      </div>

      <div>
        <Modal
          title={
            <h4 className="uppercase text-lg">
              {false ? "Update" : "Add New"} Category
            </h4>
          }
          centered
          open={isCategoryModalOpen}
          onCancel={() => setIsCategoryModalOpen(!isCategoryModalOpen)}
          width={825}
          styles={{
            body: {
              fontSize: "1.5rem",
            },
          }}
          footer={false}
        >
          <Formik
            initialValues={singleCategory ?? initialCategory}
            enableReinitialize
            validationSchema={categorySchema}
            onSubmit={(values) => {
              createHandler(values);
            }}
          >
            {({ setFieldValue, values }) => (
              <Form>
                {!singleLoading ? (
                  <div className="grid gap-5 mt-5">
                    <div>
                      <div className="grid grid-cols-1 gap-x-8 gap-y-5">
                        <div className="col-span-1">
                          <label
                            htmlFor="name"
                            className="text-base font-semibold text-gray-600"
                          >
                            Name <span className="text-danger">*</span>
                          </label>
                          <div>
                            <Field
                              type="text"
                              name="name"
                              id="name"
                              placeholder="Add name"
                              className="border rounded px-3 py-2 text-base w-full focus:outline-none focus:border-blue-200"
                            />
                            <ErrorMessage
                              name="name"
                              component="div"
                              className="error text-red-500 text-xs mt-1"
                            />
                          </div>
                        </div>

                        <div className="col-span-1">
                          <label
                            htmlFor="slug"
                            className="text-base font-semibold text-gray-600"
                          >
                            Slug
                          </label>
                          <div>
                            <Field
                              type="text"
                              name="slug"
                              id="slug"
                              placeholder="Enter slug"
                              className="border rounded px-3 py-2 text-base w-full focus:outline-none focus:border-blue-200"
                            />
                          </div>
                        </div>

                        <div className="col-span-1">
                          <label
                            htmlFor="parentCategory"
                            className="text-base font-semibold text-gray-600"
                          >
                            Parent Category
                          </label>
                          <div>
                            <Select
                              size="large"
                              defaultValue="Bulk Action"
                              style={{ width: "100%" }}
                              className="hover:!border-gray-300"
                              placeholder="Select"
                              onChange={(val) =>
                                setFieldValue("parentCategory", val)
                              }
                              options={[
                                {
                                  value: "Bulk Action",
                                  label: "Bulk Action",
                                },
                                { value: "lucy", label: "Lucy" },
                                { value: "Yiminghe", label: "yiminghe" },
                              ]}
                            />
                            <ErrorMessage
                              name="parentCategory"
                              component="div"
                            />
                          </div>
                        </div>

                        <div className="col-span-1">
                          <label
                            htmlFor="description"
                            className="text-base font-semibold text-gray-600"
                          >
                            Description
                          </label>
                          <div>
                            <Field
                              type="text"
                              name="description"
                              id="description"
                              as="textarea"
                              placeholder="Type here"
                              className="border rounded py-3 px-2 text-base w-full focus:outline-none focus:border-blue-200"
                            />
                          </div>
                        </div>

                        <div className="flex gap-2 items-center justify-end">
                          <button
                            onClick={handleCategoryModal}
                            className="uppercase font-medium text-base bg-[#E5E7EB] w-max py-2 px-4 text-slate-900 rounded-md"
                          >
                            Cancel
                          </button>
                          <button
                            className="uppercase font-medium text-base bg-[#F0614A] hover:hover:bg-[#F0614A]/90 w-max px-4 py-2 rounded-md text-white hover:text-white/90"
                            type="submit"
                          >
                            Add Category
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="min-h-[100vh] flex justify-center items-center">
                    <Spin className="large" />
                  </div>
                )}
              </Form>
            )}
          </Formik>
        </Modal>
      </div>

      <div>
        <Modal
          title={
            <div className="flex items-center gap-2 px-6 py-4 border-b">
              <span>Search Keyword</span>
            </div>
          }
          open={isModalOpen}
          width={"100%"}
          style={{ maxWidth: 625, width: "100%", padding: 0 }}
          onCancel={handleCancel}
          footer={false}
        >
          <div className="px-6 py-4">
            <div className="flex flex-wrap gap-1.5 py-5">
              {moreKeyword?.map((item: any, i: any) => {
                return (
                  <div
                    key={i}
                    className="inline-flex items-center gap-4 bg-[#E2EDF9] px-3 py-1 rounded-full text-[#4E92DF]"
                  >
                    {item}
                  </div>
                );
              })}
            </div>
            <div className="flex justify-end gap-3">
              <button className="btn btn-grey" onClick={handleCancel}>
                Cancel
              </button>
            </div>
          </div>
        </Modal>
      </div>
    </div>
  );
};

export default CategoriesList;

