"use client";

import {
  useCreateAdminMutation,
  useGetSingleaAdminsQuery,
  useUpdateAdminMutation,
} from "@/appstore/admin/admin_api";
import { useGetAllrolesQuery } from "@/appstore/role/role_api";
import { useTitle } from "@/hooks/useTitle";
import PageHeader from "@/modules/@common/page_header";
import { Button, Card, Select, Spin, Upload, message } from "antd";
import { ErrorMessage, Field, Form, Formik, FormikValues } from "formik";
import dynamic from "next/dynamic";
import { useRouter } from "next/navigation";
import { useState } from "react";
import { AiOutlineEye, AiOutlineEyeInvisible } from "react-icons/ai";
import "react-quill/dist/quill.snow.css";
import * as Yup from "yup";
import { initialValue } from "./initial_value";
import clsx from "clsx";
const ReactQuill = dynamic(() => import("react-quill"), { ssr: false });

const designationIds = [{ id: "1", name: "admin" }];

const CreateAdmin = ({ id }: any) => {
  useTitle(`${id ? "Update" : "Create"} Admin`);
  const [type, setType] = useState("password");
  const router = useRouter();

  const [create, { isLoading }] = useCreateAdminMutation();
  const [update, { isLoading: uploading }] = useUpdateAdminMutation();

  const { data: SingleAdmin, isLoading: singleLoading } =
    useGetSingleaAdminsQuery({ id }, { skip: !id });
  const { data: roles, isLoading: roleLoading } = useGetAllrolesQuery({});

  const createHandler = async (values: FormikValues) => {
    const username = values.username.trim().replace(/[^\w-]/g, "");

    const data = {
      username,
      password: values.password,
      email: values.email,
      picture: values.picture,
      roleIds: values.roleIds,
      designationId: values.designationId,
      firstName: values.firstName,
      lastName: values.lastName,
      bio: values.bio,
      file: values.file,
      mobile: values.mobile,
      website: values.websiteUrl,
      facebook: values.facebook,
      twitter: values.twitter,
      youtube: values.youtube,
      linkedin: values.linkedin,
      instagram: values.instagram,
    };

    console.log(values);

    // const res: any = id ? await update({ data, id }) : await create(data);

    if (!res?.error) {
      message.success(`Admin ${id ? "Updated" : "Created"} Successfully!`);
      if (!id) router.push(`/user/admin/editAdmin/${res?.data?.id}`);
    } else {
      message.error(res?.error?.data?.message);
    }
  };
  const validationSchema = Yup.object().shape({
    username: Yup.string().required("Username is required"),
    password: id
      ? Yup.string().nullable()
      : Yup.string()
          .min(6, "Must be more than or equal 6 characters")
          .required("Password is required")
          .matches(
            /^(?=.*[0-9])(?=.*[!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~])[a-zA-Z0-9!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~]{6,}$/,
            "Must Contain 6 Characters, One Uppercase, One Lowercase, One Number and One Special Case Character"
          ),
    email: Yup.string()
      .email("Invalid email format")
      .required("Email is required"),
    firstName: Yup.string().required("First name is required"),
    lastName: Yup.string(),
    bio: Yup.string(),
    picture: Yup.string(),
  });

  return (
    <div className="">
      <PageHeader
        breadcrumbsData={[
          { title: "Dashboard", link: "/user/admin/dashboard" },
          { title: `${id ? "Update" : "Create"} User` },
        ]}
        title={`${id ? "Update" : "Create New"} User`}
      />
      <Formik
        initialValues={SingleAdmin ?? initialValue}
        enableReinitialize={true}
        validationSchema={validationSchema}
        onSubmit={(values: any) => {
          createHandler(values);
        }}
      >
        {({ setFieldValue, values }: any) => {
          return (
            <Form>
              {!singleLoading ? (
                <div className="grid grid-cols-1 md:grid-cols-[1fr_400px] gap-5 mb-8 mt-5">
                  <div>
                    <div className="grid grid-cols-1 gap-x-8 gap-y-5">
                      <Card title="User Information">
                        <div className="grid grid-cols-2 gap-x-8 gap-y-4">
                          <div className="col-span-1">
                            <label
                              htmlFor="firstName"
                              className="text-sm font-semibold text-gray-600"
                            >
                              First Name <span className="text-danger">*</span>
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="firstName"
                                placeholder="Enter first name"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                              <ErrorMessage
                                name="firstName"
                                component="div"
                                className="error text-red-500 text-xs mt-1"
                              />
                            </div>
                          </div>
                          <div className="col-span-1">
                            <label
                              htmlFor="lastName"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Last Name
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="lastName"
                                placeholder="Enter last name"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                            </div>
                          </div>
                          <div className="col-span-1">
                            <label
                              htmlFor="email"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Email <span className="text-danger">*</span>
                            </label>
                            <div>
                              <Field
                                type="email"
                                name="email"
                                id="email"
                                placeholder="Enter email"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                              <ErrorMessage
                                name="email"
                                component="div"
                                className="error text-red-500 text-xs mt-1"
                              />
                            </div>
                          </div>
                          <div className="col-span-1">
                            <label
                              htmlFor="roleIds"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Designation
                            </label>
                            <div>
                              <Select
                                loading={roleLoading}
                                style={{ width: "100%" }}
                                size="large"
                                placeholder="Select one..."
                                onChange={(val) =>
                                  setFieldValue("designationId", val)
                                }
                                options={designationIds?.map(
                                  (designation: { id: any; name: any }) => ({
                                    value: designation.id,
                                    label: designation.name,
                                  })
                                )}
                                value={values?.designationId}
                              />
                            </div>
                          </div>
                          <div className="col-span-1">
                            <label
                              htmlFor="username"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Username <span className="text-danger">*</span>
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="username"
                                id="username"
                                placeholder="Enter username"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                              <ErrorMessage
                                name="username"
                                component="div"
                                className="error text-red-500 text-xs mt-1"
                              />
                            </div>
                          </div>

                          {!id && (
                            <div className="col-span-1">
                              <label
                                htmlFor="password"
                                className="text-sm font-semibold text-gray-600"
                              >
                                Password <span className="text-danger">*</span>
                              </label>
                              <div>
                                <div className="relative">
                                  <Field
                                    type={type}
                                    name="password"
                                    className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                                    placeholder="Password"
                                    value={values?.password ?? ""}
                                  />
                                  <div
                                    className="password_view"
                                    onClick={() =>
                                      setType(
                                        type == "password" ? "text" : "password"
                                      )
                                    }
                                  >
                                    {type === "password" ? (
                                      <AiOutlineEyeInvisible className="text-xl" />
                                    ) : (
                                      <AiOutlineEye className="text-xl" />
                                    )}
                                  </div>
                                </div>
                                <ErrorMessage
                                  name="password"
                                  component="div"
                                  className="error text-red-500 text-xs mt-1"
                                />
                              </div>
                            </div>
                          )}
                          <div className="col-span-1">
                            <label
                              htmlFor="roleIds"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Roles
                            </label>
                            <div>
                              <Select
                                mode="multiple"
                                loading={roleLoading}
                                style={{ width: "100%" }}
                                optionFilterProp="label"
                                size="large"
                                placeholder="Select Roles"
                                onChange={(val) =>
                                  setFieldValue("roleIds", val)
                                }
                                options={roles?.map(
                                  (role: { id: any; name: any }) => ({
                                    value: role.id,
                                    label: role.name,
                                  })
                                )}
                                value={values?.roleIds}
                              />
                            </div>
                          </div>

                          <div className="col-span-1">
                            <label
                              htmlFor="profilePicture"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Profile picture
                            </label>

                            <div className="w-full">
                              <Upload>
                                <Button size="large">Browse</Button>
                              </Upload>
                            </div>
                          </div>
                        </div>
                      </Card>

                      <Card title="Contact Information">
                        <div className="grid grid-cols-2 gap-x-8 gap-y-4">
                          <div className="col-span-1">
                            <label
                              htmlFor="mobile"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Mobile Number{" "}
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="mobile"
                                id="mobile"
                                placeholder="Enter number"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                            </div>
                          </div>

                          <div className="col-span-1">
                            <label
                              htmlFor="websiteUrl"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Website
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="websiteUrl"
                                id="websiteUrl"
                                placeholder="Enter url"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                            </div>
                          </div>

                          <div className="col-span-2">
                            <label
                              htmlFor="bio"
                              className="text-sm font-semibold text-gray-600"
                            >
                              About
                            </label>
                            <div>
                              <ReactQuill
                                theme="snow"
                                value={
                                  values?.bio && values?.bio !== ""
                                    ? values?.bio
                                    : ""
                                }
                                onChange={(val: any) =>
                                  setFieldValue("bio", val)
                                }
                              />
                              <ErrorMessage
                                name="bio"
                                component="div"
                                className="error text-red-500 text-xs mt-1"
                              />
                            </div>
                          </div>
                        </div>
                      </Card>
                    </div>
                  </div>

                  <div>
                    <div className="flex gap-4">
                      <button
                        className="w-full btn bg-neutral-100 hover:bg-neutral-100/80 uppercase p-2"
                        type="button"
                        onClick={() => router.push("/user/admin/list")}
                      >
                        Cancel
                      </button>
                      <button
                        className={clsx(
                          `w-full btn btn-secondary uppercase p-2`,
                          isLoading || uploading ? "disabled" : ""
                        )}
                        type="submit"
                        disabled={isLoading || uploading}
                      >
                        {isLoading || uploading ? (
                          <Spin size="default" />
                        ) : id ? (
                          "Update User"
                        ) : (
                          "Add User"
                        )}
                      </button>
                    </div>

                    <div className="mt-5">
                      <Card title="Social Media">
                        <div className="grid grid-cols-1 gap-x-8 gap-y-5">
                          <div className="col-span-1">
                            <label
                              htmlFor="facebook"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Facebook profile
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="facebook"
                                placeholder="Enter url"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                            </div>
                          </div>

                          <div className="col-span-1">
                            <label
                              htmlFor="twitter"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Twitter profile
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="twitter"
                                placeholder="Enter url"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                            </div>
                          </div>

                          <div className="col-span-1">
                            <label
                              htmlFor="instagram"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Instagram profile
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="instagram"
                                placeholder="Enter url"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                            </div>
                          </div>

                          <div className="col-span-1">
                            <label
                              htmlFor="linkedin"
                              className="text-sm font-semibold text-gray-600"
                            >
                              LinkedIn profile
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="linkedin"
                                placeholder="Enter url"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                            </div>
                          </div>

                          <div className="col-span-1">
                            <label
                              htmlFor="youtube"
                              className="text-sm font-semibold text-gray-600"
                            >
                              Youtube profile
                            </label>
                            <div>
                              <Field
                                type="text"
                                name="youtube"
                                placeholder="Enter url"
                                className="border rounded px-3 py-2 text-sm w-full focus:outline-none focus:border-blue-200"
                              />
                            </div>
                          </div>
                        </div>
                      </Card>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="min-h-[100vh] flex justify-center items-center">
                  <Spin className="large" />
                </div>
              )}
            </Form>
          );
        }}
      </Formik>
    </div>
  );
};

export default CreateAdmin;

